void FUN_00101189(void) { int iVar1; long in_FS_OFFSET; int local_24; int local_20; int local_1c; int local_18; uint local_14; long local_10; local_10 = *(long *)(in_FS_OFFSET + 0x28); local_14 = 0; __isoc99_scanf(&DAT_00102004,&local_20); for (local_1c = 1; local_1c <= local_20; local_1c = local_1c + 1) { __isoc99_scanf(&DAT_00102004,&local_24); for (local_18 = 2; local_18 <= local_24; local_18 = local_18 + 1) { if (local_24 % local_18 == 0) { iVar1 = FUN_00101261(local_24,local_18); local_14 = local_14 + iVar1; } } printf("%d\n",(ulong)local_14); local_14 = 0; } if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) { __stack_chk_fail(); } return; } 
(translation_unit (function_definition type: (primitive_type) declarator: (function_declarator declarator: (identifier) parameters: (parameter_list (parameter_declaration type: (primitive_type)))) body: (compound_statement (declaration type: (primitive_type) declarator: (identifier)) (declaration type: (sized_type_specifier) declarator: (identifier)) (declaration type: (primitive_type) declarator: (identifier)) (declaration type: (primitive_type) declarator: (identifier)) (declaration type: (primitive_type) declarator: (identifier)) (declaration type: (primitive_type) declarator: (identifier)) (declaration type: (type_identifier) declarator: (identifier)) (declaration type: (sized_type_specifier) declarator: (identifier)) (expression_statement (assignment_expression left: (identifier) right: (pointer_expression argument: (cast_expression type: (type_descriptor type: (sized_type_specifier) declarator: (abstract_pointer_declarator)) value: (parenthesized_expression (binary_expression left: (identifier) right: (number_literal))))))) (expression_statement (assignment_expression left: (identifier) right: (number_literal))) (expression_statement (call_expression function: (identifier) arguments: (argument_list (pointer_expression argument: (identifier)) (pointer_expression argument: (identifier))))) (for_statement initializer: (assignment_expression left: (identifier) right: (number_literal)) condition: (binary_expression left: (identifier) right: (identifier)) update: (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (number_literal))) body: (compound_statement (expression_statement (call_expression function: (identifier) arguments: (argument_list (pointer_expression argument: (identifier)) (pointer_expression argument: (identifier))))) (for_statement initializer: (assignment_expression left: (identifier) right: (number_literal)) condition: (binary_expression left: (identifier) right: (identifier)) update: (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (number_literal))) body: (compound_statement (if_statement condition: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (number_literal))) consequence: (compound_statement (expression_statement (assignment_expression left: (identifier) right: (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (identifier)))))))) (expression_statement (call_expression function: (identifier) arguments: (argument_list (string_literal (escape_sequence)) (cast_expression type: (type_descriptor type: (type_identifier)) value: (identifier))))) (expression_statement (assignment_expression left: (identifier) right: (number_literal))))) (if_statement condition: (parenthesized_expression (binary_expression left: (identifier) right: (pointer_expression argument: (cast_expression type: (type_descriptor type: (sized_type_specifier) declarator: (abstract_pointer_declarator)) value: (parenthesized_expression (binary_expression left: (identifier) right: (number_literal))))))) consequence: (compound_statement (expression_statement (call_expression function: (identifier) arguments: (argument_list))))) (return_statement))))
translation_unit
void FUN_00101189(void) { int iVar1; long in_FS_OFFSET; int local_24; int local_20; int local_1c; int local_18; uint local_14; long local_10; local_10 = *(long *)(in_FS_OFFSET + 0x28); local_14 = 0; __isoc99_scanf(&DAT_00102004,&local_20); for (local_1c = 1; local_1c <= local_20; local_1c = local_1c + 1) { __isoc99_scanf(&DAT_00102004,&local_24); for (local_18 = 2; local_18 <= local_24; local_18 = local_18 + 1) { if (local_24 % local_18 == 0) { iVar1 = FUN_00101261(local_24,local_18); local_14 = local_14 + iVar1; } } printf("%d\n",(ulong)local_14); local_14 = 0; } if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) { __stack_chk_fail(); } return; } 

(function_definition type: (primitive_type) declarator: (function_declarator declarator: (identifier) parameters: (parameter_list (parameter_declaration type: (primitive_type)))) body: (compound_statement (declaration type: (primitive_type) declarator: (identifier)) (declaration type: (sized_type_specifier) declarator: (identifier)) (declaration type: (primitive_type) declarator: (identifier)) (declaration type: (primitive_type) declarator: (identifier)) (declaration type: (primitive_type) declarator: (identifier)) (declaration type: (primitive_type) declarator: (identifier)) (declaration type: (type_identifier) declarator: (identifier)) (declaration type: (sized_type_specifier) declarator: (identifier)) (expression_statement (assignment_expression left: (identifier) right: (pointer_expression argument: (cast_expression type: (type_descriptor type: (sized_type_specifier) declarator: (abstract_pointer_declarator)) value: (parenthesized_expression (binary_expression left: (identifier) right: (number_literal))))))) (expression_statement (assignment_expression left: (identifier) right: (number_literal))) (expression_statement (call_expression function: (identifier) arguments: (argument_list (pointer_expression argument: (identifier)) (pointer_expression argument: (identifier))))) (for_statement initializer: (assignment_expression left: (identifier) right: (number_literal)) condition: (binary_expression left: (identifier) right: (identifier)) update: (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (number_literal))) body: (compound_statement (expression_statement (call_expression function: (identifier) arguments: (argument_list (pointer_expression argument: (identifier)) (pointer_expression argument: (identifier))))) (for_statement initializer: (assignment_expression left: (identifier) right: (number_literal)) condition: (binary_expression left: (identifier) right: (identifier)) update: (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (number_literal))) body: (compound_statement (if_statement condition: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (number_literal))) consequence: (compound_statement (expression_statement (assignment_expression left: (identifier) right: (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (identifier)))))))) (expression_statement (call_expression function: (identifier) arguments: (argument_list (string_literal (escape_sequence)) (cast_expression type: (type_descriptor type: (type_identifier)) value: (identifier))))) (expression_statement (assignment_expression left: (identifier) right: (number_literal))))) (if_statement condition: (parenthesized_expression (binary_expression left: (identifier) right: (pointer_expression argument: (cast_expression type: (type_descriptor type: (sized_type_specifier) declarator: (abstract_pointer_declarator)) value: (parenthesized_expression (binary_expression left: (identifier) right: (number_literal))))))) consequence: (compound_statement (expression_statement (call_expression function: (identifier) arguments: (argument_list))))) (return_statement)))
function_definition
void FUN_00101189(void) { int iVar1; long in_FS_OFFSET; int local_24; int local_20; int local_1c; int local_18; uint local_14; long local_10; local_10 = *(long *)(in_FS_OFFSET + 0x28); local_14 = 0; __isoc99_scanf(&DAT_00102004,&local_20); for (local_1c = 1; local_1c <= local_20; local_1c = local_1c + 1) { __isoc99_scanf(&DAT_00102004,&local_24); for (local_18 = 2; local_18 <= local_24; local_18 = local_18 + 1) { if (local_24 % local_18 == 0) { iVar1 = FUN_00101261(local_24,local_18); local_14 = local_14 + iVar1; } } printf("%d\n",(ulong)local_14); local_14 = 0; } if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) { __stack_chk_fail(); } return; }

(primitive_type)
primitive_type
void

(function_declarator declarator: (identifier) parameters: (parameter_list (parameter_declaration type: (primitive_type))))
function_declarator
FUN_00101189(void)

(identifier)
identifier
FUN_00101189

(parameter_list (parameter_declaration type: (primitive_type)))
parameter_list
(void)

("(")
(
(

(parameter_declaration type: (primitive_type))
parameter_declaration
void

(primitive_type)
primitive_type
void

(")")
)
)

(compound_statement (declaration type: (primitive_type) declarator: (identifier)) (declaration type: (sized_type_specifier) declarator: (identifier)) (declaration type: (primitive_type) declarator: (identifier)) (declaration type: (primitive_type) declarator: (identifier)) (declaration type: (primitive_type) declarator: (identifier)) (declaration type: (primitive_type) declarator: (identifier)) (declaration type: (type_identifier) declarator: (identifier)) (declaration type: (sized_type_specifier) declarator: (identifier)) (expression_statement (assignment_expression left: (identifier) right: (pointer_expression argument: (cast_expression type: (type_descriptor type: (sized_type_specifier) declarator: (abstract_pointer_declarator)) value: (parenthesized_expression (binary_expression left: (identifier) right: (number_literal))))))) (expression_statement (assignment_expression left: (identifier) right: (number_literal))) (expression_statement (call_expression function: (identifier) arguments: (argument_list (pointer_expression argument: (identifier)) (pointer_expression argument: (identifier))))) (for_statement initializer: (assignment_expression left: (identifier) right: (number_literal)) condition: (binary_expression left: (identifier) right: (identifier)) update: (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (number_literal))) body: (compound_statement (expression_statement (call_expression function: (identifier) arguments: (argument_list (pointer_expression argument: (identifier)) (pointer_expression argument: (identifier))))) (for_statement initializer: (assignment_expression left: (identifier) right: (number_literal)) condition: (binary_expression left: (identifier) right: (identifier)) update: (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (number_literal))) body: (compound_statement (if_statement condition: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (number_literal))) consequence: (compound_statement (expression_statement (assignment_expression left: (identifier) right: (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (identifier)))))))) (expression_statement (call_expression function: (identifier) arguments: (argument_list (string_literal (escape_sequence)) (cast_expression type: (type_descriptor type: (type_identifier)) value: (identifier))))) (expression_statement (assignment_expression left: (identifier) right: (number_literal))))) (if_statement condition: (parenthesized_expression (binary_expression left: (identifier) right: (pointer_expression argument: (cast_expression type: (type_descriptor type: (sized_type_specifier) declarator: (abstract_pointer_declarator)) value: (parenthesized_expression (binary_expression left: (identifier) right: (number_literal))))))) consequence: (compound_statement (expression_statement (call_expression function: (identifier) arguments: (argument_list))))) (return_statement))
compound_statement
{ int iVar1; long in_FS_OFFSET; int local_24; int local_20; int local_1c; int local_18; uint local_14; long local_10; local_10 = *(long *)(in_FS_OFFSET + 0x28); local_14 = 0; __isoc99_scanf(&DAT_00102004,&local_20); for (local_1c = 1; local_1c <= local_20; local_1c = local_1c + 1) { __isoc99_scanf(&DAT_00102004,&local_24); for (local_18 = 2; local_18 <= local_24; local_18 = local_18 + 1) { if (local_24 % local_18 == 0) { iVar1 = FUN_00101261(local_24,local_18); local_14 = local_14 + iVar1; } } printf("%d\n",(ulong)local_14); local_14 = 0; } if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) { __stack_chk_fail(); } return; }

("{")
{
{

(declaration type: (primitive_type) declarator: (identifier))
declaration
int iVar1;

(primitive_type)
primitive_type
int

(identifier)
identifier
iVar1

(";")
;
;

(declaration type: (sized_type_specifier) declarator: (identifier))
declaration
long in_FS_OFFSET;

(sized_type_specifier)
sized_type_specifier
long

("long")
long
long

(identifier)
identifier
in_FS_OFFSET

(";")
;
;

(declaration type: (primitive_type) declarator: (identifier))
declaration
int local_24;

(primitive_type)
primitive_type
int

(identifier)
identifier
local_24

(";")
;
;

(declaration type: (primitive_type) declarator: (identifier))
declaration
int local_20;

(primitive_type)
primitive_type
int

(identifier)
identifier
local_20

(";")
;
;

(declaration type: (primitive_type) declarator: (identifier))
declaration
int local_1c;

(primitive_type)
primitive_type
int

(identifier)
identifier
local_1c

(";")
;
;

(declaration type: (primitive_type) declarator: (identifier))
declaration
int local_18;

(primitive_type)
primitive_type
int

(identifier)
identifier
local_18

(";")
;
;

(declaration type: (type_identifier) declarator: (identifier))
declaration
uint local_14;

(identifier)
type_identifier
uint

(identifier)
identifier
local_14

(";")
;
;

(declaration type: (sized_type_specifier) declarator: (identifier))
declaration
long local_10;

(sized_type_specifier)
sized_type_specifier
long

("long")
long
long

(identifier)
identifier
local_10

(";")
;
;

(expression_statement (assignment_expression left: (identifier) right: (pointer_expression argument: (cast_expression type: (type_descriptor type: (sized_type_specifier) declarator: (abstract_pointer_declarator)) value: (parenthesized_expression (binary_expression left: (identifier) right: (number_literal)))))))
expression_statement
local_10 = *(long *)(in_FS_OFFSET + 0x28);

(assignment_expression left: (identifier) right: (pointer_expression argument: (cast_expression type: (type_descriptor type: (sized_type_specifier) declarator: (abstract_pointer_declarator)) value: (parenthesized_expression (binary_expression left: (identifier) right: (number_literal))))))
assignment_expression
local_10 = *(long *)(in_FS_OFFSET + 0x28)

(identifier)
identifier
local_10

("=")
=
=

(pointer_expression argument: (cast_expression type: (type_descriptor type: (sized_type_specifier) declarator: (abstract_pointer_declarator)) value: (parenthesized_expression (binary_expression left: (identifier) right: (number_literal)))))
pointer_expression
*(long *)(in_FS_OFFSET + 0x28)

("*")
*
*

(cast_expression type: (type_descriptor type: (sized_type_specifier) declarator: (abstract_pointer_declarator)) value: (parenthesized_expression (binary_expression left: (identifier) right: (number_literal))))
cast_expression
(long *)(in_FS_OFFSET + 0x28)

("(")
(
(

(type_descriptor type: (sized_type_specifier) declarator: (abstract_pointer_declarator))
type_descriptor
long *

(sized_type_specifier)
sized_type_specifier
long

("long")
long
long

(abstract_pointer_declarator)
abstract_pointer_declarator
*

("*")
*
*

(")")
)
)

(parenthesized_expression (binary_expression left: (identifier) right: (number_literal)))
parenthesized_expression
(in_FS_OFFSET + 0x28)

("(")
(
(

(binary_expression left: (identifier) right: (number_literal))
binary_expression
in_FS_OFFSET + 0x28

(identifier)
identifier
in_FS_OFFSET

("+")
+
+

(number_literal)
number_literal
0x28

(")")
)
)

(";")
;
;

(expression_statement (assignment_expression left: (identifier) right: (number_literal)))
expression_statement
local_14 = 0;

(assignment_expression left: (identifier) right: (number_literal))
assignment_expression
local_14 = 0

(identifier)
identifier
local_14

("=")
=
=

(number_literal)
number_literal
0

(";")
;
;

(expression_statement (call_expression function: (identifier) arguments: (argument_list (pointer_expression argument: (identifier)) (pointer_expression argument: (identifier)))))
expression_statement
__isoc99_scanf(&DAT_00102004,&local_20);

(call_expression function: (identifier) arguments: (argument_list (pointer_expression argument: (identifier)) (pointer_expression argument: (identifier))))
call_expression
__isoc99_scanf(&DAT_00102004,&local_20)

(identifier)
identifier
__isoc99_scanf

(argument_list (pointer_expression argument: (identifier)) (pointer_expression argument: (identifier)))
argument_list
(&DAT_00102004,&local_20)

("(")
(
(

(pointer_expression argument: (identifier))
pointer_expression
&DAT_00102004

("&")
&
&

(identifier)
identifier
DAT_00102004

(",")
,
,

(pointer_expression argument: (identifier))
pointer_expression
&local_20

("&")
&
&

(identifier)
identifier
local_20

(")")
)
)

(";")
;
;

(for_statement initializer: (assignment_expression left: (identifier) right: (number_literal)) condition: (binary_expression left: (identifier) right: (identifier)) update: (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (number_literal))) body: (compound_statement (expression_statement (call_expression function: (identifier) arguments: (argument_list (pointer_expression argument: (identifier)) (pointer_expression argument: (identifier))))) (for_statement initializer: (assignment_expression left: (identifier) right: (number_literal)) condition: (binary_expression left: (identifier) right: (identifier)) update: (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (number_literal))) body: (compound_statement (if_statement condition: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (number_literal))) consequence: (compound_statement (expression_statement (assignment_expression left: (identifier) right: (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (identifier)))))))) (expression_statement (call_expression function: (identifier) arguments: (argument_list (string_literal (escape_sequence)) (cast_expression type: (type_descriptor type: (type_identifier)) value: (identifier))))) (expression_statement (assignment_expression left: (identifier) right: (number_literal)))))
for_statement
for (local_1c = 1; local_1c <= local_20; local_1c = local_1c + 1) { __isoc99_scanf(&DAT_00102004,&local_24); for (local_18 = 2; local_18 <= local_24; local_18 = local_18 + 1) { if (local_24 % local_18 == 0) { iVar1 = FUN_00101261(local_24,local_18); local_14 = local_14 + iVar1; } } printf("%d\n",(ulong)local_14); local_14 = 0; }

("for")
for
for

("(")
(
(

(assignment_expression left: (identifier) right: (number_literal))
assignment_expression
local_1c = 1

(identifier)
identifier
local_1c

("=")
=
=

(number_literal)
number_literal
1

(";")
;
;

(binary_expression left: (identifier) right: (identifier))
binary_expression
local_1c <= local_20

(identifier)
identifier
local_1c

("<=")
<=
<=

(identifier)
identifier
local_20

(";")
;
;

(assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (number_literal)))
assignment_expression
local_1c = local_1c + 1

(identifier)
identifier
local_1c

("=")
=
=

(binary_expression left: (identifier) right: (number_literal))
binary_expression
local_1c + 1

(identifier)
identifier
local_1c

("+")
+
+

(number_literal)
number_literal
1

(")")
)
)

(compound_statement (expression_statement (call_expression function: (identifier) arguments: (argument_list (pointer_expression argument: (identifier)) (pointer_expression argument: (identifier))))) (for_statement initializer: (assignment_expression left: (identifier) right: (number_literal)) condition: (binary_expression left: (identifier) right: (identifier)) update: (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (number_literal))) body: (compound_statement (if_statement condition: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (number_literal))) consequence: (compound_statement (expression_statement (assignment_expression left: (identifier) right: (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (identifier)))))))) (expression_statement (call_expression function: (identifier) arguments: (argument_list (string_literal (escape_sequence)) (cast_expression type: (type_descriptor type: (type_identifier)) value: (identifier))))) (expression_statement (assignment_expression left: (identifier) right: (number_literal))))
compound_statement
{ __isoc99_scanf(&DAT_00102004,&local_24); for (local_18 = 2; local_18 <= local_24; local_18 = local_18 + 1) { if (local_24 % local_18 == 0) { iVar1 = FUN_00101261(local_24,local_18); local_14 = local_14 + iVar1; } } printf("%d\n",(ulong)local_14); local_14 = 0; }

("{")
{
{

(expression_statement (call_expression function: (identifier) arguments: (argument_list (pointer_expression argument: (identifier)) (pointer_expression argument: (identifier)))))
expression_statement
__isoc99_scanf(&DAT_00102004,&local_24);

(call_expression function: (identifier) arguments: (argument_list (pointer_expression argument: (identifier)) (pointer_expression argument: (identifier))))
call_expression
__isoc99_scanf(&DAT_00102004,&local_24)

(identifier)
identifier
__isoc99_scanf

(argument_list (pointer_expression argument: (identifier)) (pointer_expression argument: (identifier)))
argument_list
(&DAT_00102004,&local_24)

("(")
(
(

(pointer_expression argument: (identifier))
pointer_expression
&DAT_00102004

("&")
&
&

(identifier)
identifier
DAT_00102004

(",")
,
,

(pointer_expression argument: (identifier))
pointer_expression
&local_24

("&")
&
&

(identifier)
identifier
local_24

(")")
)
)

(";")
;
;

(for_statement initializer: (assignment_expression left: (identifier) right: (number_literal)) condition: (binary_expression left: (identifier) right: (identifier)) update: (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (number_literal))) body: (compound_statement (if_statement condition: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (number_literal))) consequence: (compound_statement (expression_statement (assignment_expression left: (identifier) right: (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (identifier))))))))
for_statement
for (local_18 = 2; local_18 <= local_24; local_18 = local_18 + 1) { if (local_24 % local_18 == 0) { iVar1 = FUN_00101261(local_24,local_18); local_14 = local_14 + iVar1; } }

("for")
for
for

("(")
(
(

(assignment_expression left: (identifier) right: (number_literal))
assignment_expression
local_18 = 2

(identifier)
identifier
local_18

("=")
=
=

(number_literal)
number_literal
2

(";")
;
;

(binary_expression left: (identifier) right: (identifier))
binary_expression
local_18 <= local_24

(identifier)
identifier
local_18

("<=")
<=
<=

(identifier)
identifier
local_24

(";")
;
;

(assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (number_literal)))
assignment_expression
local_18 = local_18 + 1

(identifier)
identifier
local_18

("=")
=
=

(binary_expression left: (identifier) right: (number_literal))
binary_expression
local_18 + 1

(identifier)
identifier
local_18

("+")
+
+

(number_literal)
number_literal
1

(")")
)
)

(compound_statement (if_statement condition: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (number_literal))) consequence: (compound_statement (expression_statement (assignment_expression left: (identifier) right: (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (identifier)))))))
compound_statement
{ if (local_24 % local_18 == 0) { iVar1 = FUN_00101261(local_24,local_18); local_14 = local_14 + iVar1; } }

("{")
{
{

(if_statement condition: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (number_literal))) consequence: (compound_statement (expression_statement (assignment_expression left: (identifier) right: (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (identifier))))))
if_statement
if (local_24 % local_18 == 0) { iVar1 = FUN_00101261(local_24,local_18); local_14 = local_14 + iVar1; }

("if")
if
if

(parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (number_literal)))
parenthesized_expression
(local_24 % local_18 == 0)

("(")
(
(

(binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (number_literal))
binary_expression
local_24 % local_18 == 0

(binary_expression left: (identifier) right: (identifier))
binary_expression
local_24 % local_18

(identifier)
identifier
local_24

("%")
%
%

(identifier)
identifier
local_18

("==")
==
==

(number_literal)
number_literal
0

(")")
)
)

(compound_statement (expression_statement (assignment_expression left: (identifier) right: (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (identifier)))))
compound_statement
{ iVar1 = FUN_00101261(local_24,local_18); local_14 = local_14 + iVar1; }

("{")
{
{

(expression_statement (assignment_expression left: (identifier) right: (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier)))))
expression_statement
iVar1 = FUN_00101261(local_24,local_18);

(assignment_expression left: (identifier) right: (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier))))
assignment_expression
iVar1 = FUN_00101261(local_24,local_18)

(identifier)
identifier
iVar1

("=")
=
=

(call_expression function: (identifier) arguments: (argument_list (identifier) (identifier)))
call_expression
FUN_00101261(local_24,local_18)

(identifier)
identifier
FUN_00101261

(argument_list (identifier) (identifier))
argument_list
(local_24,local_18)

("(")
(
(

(identifier)
identifier
local_24

(",")
,
,

(identifier)
identifier
local_18

(")")
)
)

(";")
;
;

(expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (identifier))))
expression_statement
local_14 = local_14 + iVar1;

(assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (identifier)))
assignment_expression
local_14 = local_14 + iVar1

(identifier)
identifier
local_14

("=")
=
=

(binary_expression left: (identifier) right: (identifier))
binary_expression
local_14 + iVar1

(identifier)
identifier
local_14

("+")
+
+

(identifier)
identifier
iVar1

(";")
;
;

("}")
}
}

("}")
}
}

(expression_statement (call_expression function: (identifier) arguments: (argument_list (string_literal (escape_sequence)) (cast_expression type: (type_descriptor type: (type_identifier)) value: (identifier)))))
expression_statement
printf("%d\n",(ulong)local_14);

(call_expression function: (identifier) arguments: (argument_list (string_literal (escape_sequence)) (cast_expression type: (type_descriptor type: (type_identifier)) value: (identifier))))
call_expression
printf("%d\n",(ulong)local_14)

(identifier)
identifier
printf

(argument_list (string_literal (escape_sequence)) (cast_expression type: (type_descriptor type: (type_identifier)) value: (identifier)))
argument_list
("%d\n",(ulong)local_14)

("(")
(
(

(string_literal (escape_sequence))
string_literal
"%d\n"

(""")
"
"

(escape_sequence)
escape_sequence
\n

(""")
"
"

(",")
,
,

(cast_expression type: (type_descriptor type: (type_identifier)) value: (identifier))
cast_expression
(ulong)local_14

("(")
(
(

(type_descriptor type: (type_identifier))
type_descriptor
ulong

(identifier)
type_identifier
ulong

(")")
)
)

(identifier)
identifier
local_14

(")")
)
)

(";")
;
;

(expression_statement (assignment_expression left: (identifier) right: (number_literal)))
expression_statement
local_14 = 0;

(assignment_expression left: (identifier) right: (number_literal))
assignment_expression
local_14 = 0

(identifier)
identifier
local_14

("=")
=
=

(number_literal)
number_literal
0

(";")
;
;

("}")
}
}

(if_statement condition: (parenthesized_expression (binary_expression left: (identifier) right: (pointer_expression argument: (cast_expression type: (type_descriptor type: (sized_type_specifier) declarator: (abstract_pointer_declarator)) value: (parenthesized_expression (binary_expression left: (identifier) right: (number_literal))))))) consequence: (compound_statement (expression_statement (call_expression function: (identifier) arguments: (argument_list)))))
if_statement
if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) { __stack_chk_fail(); }

("if")
if
if

(parenthesized_expression (binary_expression left: (identifier) right: (pointer_expression argument: (cast_expression type: (type_descriptor type: (sized_type_specifier) declarator: (abstract_pointer_declarator)) value: (parenthesized_expression (binary_expression left: (identifier) right: (number_literal)))))))
parenthesized_expression
(local_10 != *(long *)(in_FS_OFFSET + 0x28))

("(")
(
(

(binary_expression left: (identifier) right: (pointer_expression argument: (cast_expression type: (type_descriptor type: (sized_type_specifier) declarator: (abstract_pointer_declarator)) value: (parenthesized_expression (binary_expression left: (identifier) right: (number_literal))))))
binary_expression
local_10 != *(long *)(in_FS_OFFSET + 0x28)

(identifier)
identifier
local_10

("!=")
!=
!=

(pointer_expression argument: (cast_expression type: (type_descriptor type: (sized_type_specifier) declarator: (abstract_pointer_declarator)) value: (parenthesized_expression (binary_expression left: (identifier) right: (number_literal)))))
pointer_expression
*(long *)(in_FS_OFFSET + 0x28)

("*")
*
*

(cast_expression type: (type_descriptor type: (sized_type_specifier) declarator: (abstract_pointer_declarator)) value: (parenthesized_expression (binary_expression left: (identifier) right: (number_literal))))
cast_expression
(long *)(in_FS_OFFSET + 0x28)

("(")
(
(

(type_descriptor type: (sized_type_specifier) declarator: (abstract_pointer_declarator))
type_descriptor
long *

(sized_type_specifier)
sized_type_specifier
long

("long")
long
long

(abstract_pointer_declarator)
abstract_pointer_declarator
*

("*")
*
*

(")")
)
)

(parenthesized_expression (binary_expression left: (identifier) right: (number_literal)))
parenthesized_expression
(in_FS_OFFSET + 0x28)

("(")
(
(

(binary_expression left: (identifier) right: (number_literal))
binary_expression
in_FS_OFFSET + 0x28

(identifier)
identifier
in_FS_OFFSET

("+")
+
+

(number_literal)
number_literal
0x28

(")")
)
)

(")")
)
)

(compound_statement (expression_statement (call_expression function: (identifier) arguments: (argument_list))))
compound_statement
{ __stack_chk_fail(); }

("{")
{
{

(expression_statement (call_expression function: (identifier) arguments: (argument_list)))
expression_statement
__stack_chk_fail();

(call_expression function: (identifier) arguments: (argument_list))
call_expression
__stack_chk_fail()

(identifier)
identifier
__stack_chk_fail

(argument_list)
argument_list
()

("(")
(
(

(")")
)
)

(";")
;
;

("}")
}
}

(return_statement)
return_statement
return;

("return")
return
return

(";")
;
;

("}")
}
}

__isoc99_scanf(&DAT_00102004,&local_20)
pointer_expression &DAT_00102004
pointer_expression &local_20

__isoc99_scanf(&DAT_00102004,&local_24)
pointer_expression &DAT_00102004
pointer_expression &local_24

FUN_00101261(local_24,local_18)
identifier local_24
identifier local_18

printf("%d\n",(ulong)local_14)
string_literal "%d\n"
cast_expression (ulong)local_14

__stack_chk_fail()

