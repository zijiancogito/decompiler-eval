sub_401020
long long sub_401020() { unsigned long long v0; v0 = 0; goto *(4214800); }
translation_unit
root

function_definition
translation_unit

sized_type_specifier
function_definition

long
sized_type_specifier

long
sized_type_specifier

function_declarator
sized_type_specifier

identifier
function_declarator

parameter_list
function_declarator

(
parameter_list

)
parameter_list

compound_statement
parameter_list

{
compound_statement

declaration
compound_statement

sized_type_specifier
declaration

unsigned
sized_type_specifier

long
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

expression_statement
sized_type_specifier

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

ERROR
assignment_expression

goto
ERROR

expression_statement
ERROR

pointer_expression
expression_statement

*
pointer_expression

parenthesized_expression
pointer_expression

(
parenthesized_expression

number_literal
parenthesized_expression

)
parenthesized_expression

;
parenthesized_expression

}
parenthesized_expression

f_printf
int f_printf(unsigned long a0) { printf("%d", a0); return; }
translation_unit
root

function_definition
translation_unit

primitive_type
function_definition

function_declarator
function_definition

identifier
function_declarator

parameter_list
function_declarator

(
parameter_list

parameter_declaration
parameter_list

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

)
sized_type_specifier

compound_statement
sized_type_specifier

{
compound_statement

expression_statement
compound_statement

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

string_literal
argument_list

"
string_literal

"
string_literal

,
string_literal

identifier
string_literal

)
string_literal

;
string_literal

return_statement
string_literal

return
return_statement

;
return_statement

}
return_statement

f_scanf_nop
long long f_scanf_nop() { char v0; __isoc99_scanf("%d", &v0); return *(&v0); }
translation_unit
root

function_definition
translation_unit

sized_type_specifier
function_definition

long
sized_type_specifier

long
sized_type_specifier

function_declarator
sized_type_specifier

identifier
function_declarator

parameter_list
function_declarator

(
parameter_list

)
parameter_list

compound_statement
parameter_list

{
compound_statement

declaration
compound_statement

primitive_type
declaration

identifier
declaration

;
declaration

expression_statement
declaration

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

string_literal
argument_list

"
string_literal

"
string_literal

,
string_literal

pointer_expression
string_literal

&
pointer_expression

identifier
pointer_expression

)
pointer_expression

;
pointer_expression

return_statement
pointer_expression

return
return_statement

pointer_expression
return_statement

*
pointer_expression

parenthesized_expression
pointer_expression

(
parenthesized_expression

pointer_expression
parenthesized_expression

&
pointer_expression

identifier
pointer_expression

)
pointer_expression

;
pointer_expression

}
pointer_expression

v0
====================================================
f_rand
long long f_rand() { unsigned int v0; v0 = rand(); return v0; }
translation_unit
root

function_definition
translation_unit

sized_type_specifier
function_definition

long
sized_type_specifier

long
sized_type_specifier

function_declarator
sized_type_specifier

identifier
function_declarator

parameter_list
function_declarator

(
parameter_list

)
parameter_list

compound_statement
parameter_list

{
compound_statement

declaration
compound_statement

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

expression_statement
sized_type_specifier

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

return_statement
argument_list

return
return_statement

identifier
return_statement

;
return_statement

}
return_statement

func0
int func0(unsigned long a0) { unsigned int v0; unsigned int v1; unsigned int v2; unsigned int v3; unsigned int v4; unsigned int v5; unsigned int v6; unsigned int v7; unsigned int v8; unsigned int v9; unsigned int v10; unsigned int v11; unsigned int v12; unsigned int v13; unsigned int v14; unsigned int v15; v15 = a0; v14 = f_scanf_nop(); v13 = f_scanf_nop(); v12 = f_scanf_nop(); v11 = f_rand(); v10 = f_rand(); v9 = f_rand(); v8 = f_scanf_nop(); v7 = f_rand(); v6 = f_rand(); v5 = f_rand(); v4 = -9; v3 = 4; v2 = -5; v1 = 6; v0 = -7; v4 = v15 - v9; f_printf(v4); v11 = v1 * v0 + v15 + v14; v0 = v10 * (v14 + v5 ^ v9) & v2; v3 = v9 * (v12 & v14) - v15; v5 = v12 | v11; f_printf(v5); v2 = (v3 | v1) - v9; v4 = v12 + v14; v10 = v3 ^ v9 ^ v0; f_printf(v10); v3 = v11 * v2; f_printf(v3); v2 = (v11 >> 31 CONCAT v11) % v6; v2 = (v13 >> 31 CONCAT v13) % v1 + v14; f_printf(v2); v1 = v2 & v10; v0 = (v7 >> 31 CONCAT v7) % v11; v13 = (v5 ^ v9) + v8; f_printf(v13); v12 = v9 - v2 + v0; v10 = (v15 >> 31 CONCAT v15) % v10; v8 = v14 - v12 & v6; f_printf(v8); v15 = v7 + v0; f_printf(v15); v14 = v0 | v11; v11 = v7 & v13 | v7; v7 = v14 & v8; f_printf(v7); v13 = v5 * v0; f_printf(v13); v1 = v4 * v6; f_printf(v1); v5 = ((v4 & v7) >> 31 CONCAT v4 & v7) % v2 - v13 + v15 - v0; v3 = (((v14 >> 31 CONCAT v14) % v1 & v0) >> 31 CONCAT (v14 >> 31 CONCAT v14) % v1 & v0) % v11; v2 = v6 | v12 | v6; v10 = v15 + v11 & v8; f_printf(v10); v1 = v12 - v7; v1 = v8 * (((((v0 ^ v5) & v10) >> 31 CONCAT (v0 ^ v5) & v10) % v11 & v12) + v10) & v2; f_printf(v1); v2 = (v14 | v6) - v8; f_printf(v2); v10 = (v14 >> 31 CONCAT v14) % v3; return; }
translation_unit
root

function_definition
translation_unit

primitive_type
function_definition

function_declarator
function_definition

identifier
function_declarator

parameter_list
function_declarator

(
parameter_list

parameter_declaration
parameter_list

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

)
sized_type_specifier

compound_statement
sized_type_specifier

{
compound_statement

declaration
compound_statement

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

expression_statement
sized_type_specifier

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

)
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

+
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

)
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

&
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

-
ERROR

identifier
ERROR

+
ERROR

identifier
ERROR

-
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

&
ERROR

identifier
ERROR

)
ERROR

>>
ERROR

ERROR
ERROR

number_literal
ERROR

binary_expression
ERROR

call_expression
binary_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

binary_expression
argument_list

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

&
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

&
binary_expression

identifier
binary_expression

)
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

call_expression
ERROR

identifier
call_expression

argument_list
call_expression

(
argument_list

binary_expression
argument_list

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

&
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

)
binary_expression

+
binary_expression

identifier
binary_expression

)
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

return_statement
ERROR

return
return_statement

;
return_statement

}
return_statement

func1
int func1(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4) { unsigned int v0; unsigned int v1; unsigned int v2; unsigned int v3; unsigned int v4; unsigned int v5; unsigned int v6; unsigned int v7; unsigned int v8; unsigned int v9; unsigned int v10; unsigned int v11; unsigned int v12; unsigned int v13; unsigned int v14; unsigned int v15; unsigned int v16; unsigned int v17; unsigned int v18; v18 = a0; v17 = a1; v16 = a2; v15 = a3; v14 = f_rand(); v13 = f_rand(); v12 = f_rand(); v11 = f_rand(); v10 = f_scanf_nop(); v9 = f_scanf_nop(); v8 = f_scanf_nop(); v7 = f_scanf_nop(); v6 = f_rand(); v5 = f_scanf_nop(); v4 = -7; v3 = 7; v2 = -2; v1 = 10; v0 = -10; v18 = ((v3 ^ v2) + v0 - v1 >> 31 CONCAT (v3 ^ v2) + v0 - v1) % v15 + v14; f_printf(v18); v16 = v18 - v5; v7 += v5; f_printf(v7); v11 = ((v14 | v17) >> 31 CONCAT v14 | v17) % v7 | v2; v10 = v10 * v9 | v2; v7 = v13 * v3 | v14; f_printf(v7); v12 = v2 & v5; f_printf(v12); v0 = a4 - v0; f_printf(v0); v10 = v6 + v17; f_printf(v10); v5 = (((v7 >> 31 CONCAT v7) % v11 >> 31 CONCAT (v7 >> 31 CONCAT v7) % v11) % v14 >> 31 CONCAT ((v7 >> 31 CONCAT v7) % v11 >> 31 CONCAT (v7 >> 31 CONCAT v7) % v11) % v14) % v9 | v2; v11 = v9 & v18 & v4; f_printf(v11); v1 = v6 * v18; v18 = v16 | v0; v13 = ((v15 | v16) & a4) + v3; f_printf(v13); v15 = v18 + v12 ^ v3; f_printf(v15); v13 = v4 & v2 & v3; v9 = v8 - v17; v16 = v12 & v13 | v3; f_printf(v16); v0 = v7 ^ v3; f_printf(v0); v6 = v16 ^ v0; v9 = a4 ^ v2; v16 = (v11 >> 31 CONCAT v11) % v1 | v6; f_printf(v16); v1 = v7 + v5 - v3; v17 = v8 ^ v4; v2 ^= v5; v4 = v2 | v13; v4 = (v7 | v17) + v9 + v10; f_printf(v4); v5 = a4 * ((v4 + v16 | v15) ^ v7); f_printf(v5); v12 = v17 & v14; f_printf(v12); v6 = v4 ^ v10; f_printf(v6); v7 = (v17 | v6) + v16; return; }
translation_unit
root

function_definition
translation_unit

primitive_type
function_definition

function_declarator
function_definition

identifier
function_declarator

parameter_list
function_declarator

(
parameter_list

parameter_declaration
parameter_list

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

,
sized_type_specifier

parameter_declaration
sized_type_specifier

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

,
sized_type_specifier

parameter_declaration
sized_type_specifier

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

,
sized_type_specifier

parameter_declaration
sized_type_specifier

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

,
sized_type_specifier

parameter_declaration
sized_type_specifier

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

)
sized_type_specifier

compound_statement
sized_type_specifier

{
compound_statement

declaration
compound_statement

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

expression_statement
sized_type_specifier

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

+
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

binary_expression
ERROR

binary_expression
binary_expression

call_expression
binary_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

binary_expression
argument_list

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

+
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

+=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

|
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

|
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

>>
ERROR

ERROR
ERROR

number_literal
ERROR

binary_expression
ERROR

call_expression
binary_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

binary_expression
argument_list

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

>>
ERROR

ERROR
ERROR

number_literal
ERROR

binary_expression
ERROR

call_expression
binary_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

binary_expression
argument_list

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

>>
ERROR

ERROR
ERROR

number_literal
ERROR

binary_expression
ERROR

call_expression
binary_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

binary_expression
argument_list

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

|
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

&
binary_expression

identifier
binary_expression

)
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

|
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

^=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

+
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

return_statement
binary_expression

return
return_statement

;
return_statement

}
return_statement

func2
int func2(unsigned long a0) { unsigned int v0; unsigned int v1; unsigned int v2; unsigned int v3; unsigned int v4; unsigned int v5; unsigned int v6; unsigned int v7; unsigned int v8; unsigned int v9; unsigned int v10; unsigned int v11; unsigned int v12; unsigned int v13; unsigned int v14; unsigned int v15; v15 = a0; v14 = f_rand(); v13 = f_rand(); v12 = f_scanf_nop(); v11 = f_scanf_nop(); v10 = f_rand(); v9 = f_scanf_nop(); v8 = f_scanf_nop(); v7 = f_rand(); v6 = f_scanf_nop(); v5 = f_scanf_nop(); v4 = -3; v3 = -5; v2 = -1; v1 = -1; v0 = 8; v13 = v14 - v6 - v12; v13 = v9 - v0; v4 = v9 * (v0 * v10 + v3 ^ v13) | v6; v10 = (v8 ^ v6) & v2 | v5; f_printf(v10); v12 = v3 * ((v1 ^ v12) & v11); v9 = v11 & v8; f_printf(v9); v4 = v8 + v15 & v13; f_printf(v4); v10 = v14 + v6; f_printf(v10); v7 = ((v8 | v14) >> 31 CONCAT v8 | v14) % v1; v7 = v4 | v1; f_printf(v7); v2 = (v6 >> 31 CONCAT v6) % v8 + v4; v6 = ...; v1 = v0 * (v6 ^ v15); v7 = v8 + v1 & v3; f_printf(v7); v14 = v15 & v5; v5 = (v5 * (v15 & v14) ^ v11) - v9 + v15 + v12; f_printf(v5); v8 = v4 | v3 | v0; f_printf(v8); v9 = v8 * ((v1 >> 31 CONCAT v1) % v6 & v1); v13 -= v8; f_printf(v13); v6 = v11 * v14; f_printf(v6); v11 = (v0 * ((v13 | v3) & v10) & v7 ^ v8) - v10; f_printf(v11); v15 = v14 & v4; v13 = v0 ^ v4; f_printf(v13); v7 = v6 * v15 ^ v1; v13 = v11 + v7; f_printf(v13); v1 = v9 - v12 | v5; v10 = v8 * (v0 - v14 ^ v3) - v13 + v10; v8 = (v12 ^ v10) + v6; f_printf(v8); v6 ^= v12; v2 = v0 - v3 - v2; v9 = (v14 * v1 >> 31 CONCAT v14 * v1) % v8 + v6 | v4; return; }
translation_unit
root

function_definition
translation_unit

primitive_type
function_definition

function_declarator
function_definition

identifier
function_declarator

parameter_list
function_declarator

(
parameter_list

parameter_declaration
parameter_list

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

)
sized_type_specifier

compound_statement
sized_type_specifier

{
compound_statement

declaration
compound_statement

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

expression_statement
sized_type_specifier

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

&
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

&
binary_expression

identifier
binary_expression

)
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

|
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

+
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

ERROR
assignment_expression

.
ERROR

.
ERROR

.
ERROR

;
ERROR

assignment_expression
ERROR

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

)
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

-
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

&
ERROR

identifier
ERROR

)
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

-=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

&
binary_expression

identifier
binary_expression

)
binary_expression

&
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

-
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

^=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

binary_expression
ERROR

identifier
binary_expression

*
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

return_statement
binary_expression

return
return_statement

;
return_statement

}
return_statement

func3
int func3(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4) { unsigned int v0; unsigned int v1; unsigned int v2; unsigned int v3; unsigned int v4; unsigned int v5; unsigned int v6; unsigned int v7; unsigned int v8; unsigned int v9; unsigned int v10; unsigned int v11; unsigned int v12; unsigned int v13; unsigned int v14; unsigned int v15; unsigned int v16; unsigned int v17; unsigned int v18; unsigned int v19; v19 = a0; v18 = a1; v17 = a2; v16 = a3; v15 = a4; v14 = f_rand(); v13 = f_scanf_nop(); v12 = f_rand(); v11 = f_scanf_nop(); v10 = f_rand(); v9 = f_rand(); v8 = f_rand(); v7 = f_rand(); v6 = f_scanf_nop(); v5 = f_scanf_nop(); v4 = 7; v3 = -0x4; v2 = 6; v1 = -2; v0 = 9; v6 = v0 - v9; f_printf(v6); v17 = v0 * (v9 - v8 >> 31 CONCAT v9 - v8) % v4; f_printf(v17); v11 = v10 ^ v5; f_printf(v11); v10 = v1 - v14; v10 = v4 & v10; f_printf(v10); v1 = ((v17 * (v6 + v11) ^ v0) - v5 & v2) + v11; v11 = v1 - v5 - v15; v12 = v7 - v1; v15 = v18 * v7 * (v19 ^ v17 | v9) - v14; f_printf(v15); v3 = v11 & v1; f_printf(v3); v5 = v6 - v0; f_printf(v5); v10 = ((v19 | v8) >> 31 CONCAT v19 | v8) % v13; v16 = (v15 ^ v18) - v6 - v5; f_printf(v16); v0 = v18 * v9 + v1 + v8 | v7; v15 = v8 * (v9 - v11) ^ v18; f_printf(v15); v12 = v8 * (v15 >> 31 CONCAT v15) % v17 + v17; v14 = ((v5 - v9 >> 31 CONCAT v5 - v9) % v6 >> 31 CONCAT (v5 - v9 >> 31 CONCAT v5 - v9) % v6) % v9; v11 = (v3 >> 31 CONCAT v3) % v10; f_printf(v11); v9 = ((v6 >> 31 CONCAT v6) % v17 >> 31 CONCAT (v6 >> 31 CONCAT v6) % v17) % v14; f_printf(v9); v7 = (v3 >> 31 CONCAT v3) % v14; v3 = (v8 | v6) & v11; v0 = v13 + v0 - v1 & v2 ^ v5; f_printf(v0); v11 *= v17; f_printf(v11); v2 = v5 & v8; v18 = v9 * v0; v4 = v18 * (v0 - v15); v18 = (v7 >> 31 CONCAT v7) % v2; v16 = (v12 + v14 ^ v1) & v14; f_printf(v16); v6 = v3 ^ v0; f_printf(v6); v16 = v12 + v15; v11 = (v18 >> 31 CONCAT v18) % v2 - v12 ^ v0; return; }
translation_unit
root

function_definition
translation_unit

primitive_type
function_definition

function_declarator
function_definition

identifier
function_declarator

parameter_list
function_declarator

(
parameter_list

parameter_declaration
parameter_list

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

,
sized_type_specifier

parameter_declaration
sized_type_specifier

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

,
sized_type_specifier

parameter_declaration
sized_type_specifier

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

,
sized_type_specifier

parameter_declaration
sized_type_specifier

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

,
sized_type_specifier

parameter_declaration
sized_type_specifier

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

)
sized_type_specifier

compound_statement
sized_type_specifier

{
compound_statement

declaration
compound_statement

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

expression_statement
sized_type_specifier

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

binary_expression
ERROR

identifier
binary_expression

-
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

)
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

-
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

)
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

|
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

-
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

)
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

+
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

binary_expression
ERROR

identifier
binary_expression

-
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

binary_expression
ERROR

call_expression
binary_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

binary_expression
argument_list

binary_expression
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

binary_expression
ERROR

identifier
binary_expression

-
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

>>
ERROR

ERROR
ERROR

number_literal
ERROR

binary_expression
ERROR

call_expression
binary_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

binary_expression
argument_list

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

binary_expression
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

*=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

)
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

-
ERROR

identifier
ERROR

^
ERROR

identifier
ERROR

;
ERROR

return_statement
ERROR

return
return_statement

;
return_statement

}
return_statement

func4
int func4(unsigned long a0, unsigned long a1) { unsigned int v0; unsigned int v1; unsigned int v2; unsigned int v3; unsigned int v4; unsigned int v5; unsigned int v6; unsigned int v7; unsigned int v8; unsigned int v9; unsigned int v10; unsigned int v11; unsigned int v12; unsigned int v13; unsigned int v14; unsigned int v15; v15 = a0; v14 = f_scanf_nop(); v13 = f_rand(); v12 = f_scanf_nop(); v11 = f_rand(); v10 = f_rand(); v9 = f_scanf_nop(); v8 = f_rand(); v7 = f_scanf_nop(); v6 = f_rand(); v5 = f_scanf_nop(); v4 = -1; v3 = -0x4; v2 = -7; v1 = 5; v0 = 9; v3 = v5 + v14; f_printf(v3); v0 = v7 & v12; v12 = (v5 + v15 >> 31 CONCAT v5 + v15) % v11; f_printf(v12); v12 = v3 | v2; f_printf(v12); v9 = v0 ^ v10; v15 = (v12 >> 31 CONCAT v12) % v7 - v14; v0 = ((v6 * v11 >> 31 CONCAT v6 * v11) % v13 ^ v5) + v8; v0 = v9 | v4; f_printf(v0); v6 = v0 * v2 - v11; v2 = v7 & v4 & v15 & v7; f_printf(v2); v9 = v10 * (v4 + v8 + v2 >> 31 CONCAT v4 + v8 + v2) % v1 + v6; f_printf(v9); v1 = (v1 >> 31 CONCAT v1) % v13; f_printf(v1); v2 = (v12 ^ v7) - v4; f_printf(v2); v4 = v9 - v6; f_printf(v4); v7 = v5 - v6; v3 = (v10 >> 31 CONCAT v10) % v9 | v5; v11 = v2 - v11; v2 = v2 * v12 | v10; v6 = (v4 & a1 & v5) + v13; v8 = (v14 >> 31 CONCAT v14) % v10; v3 = v14 & v9; v4 = (v9 >> 31 CONCAT v9) % v4; v5 = v6 - v8; v8 = v2 * v11 * (a1 * (((a1 | v10) & a1 ^ v15) - v6) & v3); f_printf(v8); v6 = v2 | a1; v0 = v5 * v3; f_printf(v0); v0 = (v14 >> 31 CONCAT v14) % v4 | v5; v10 = (v12 - v5 >> 31 CONCAT v12 - v5) % v6; v14 = (v2 * v8 >> 31 CONCAT v2 * v8) % v4; f_printf(v14); v0 = v10 - v3; f_printf(v0); v1 = (v7 | v12) ^ v13; return; }
translation_unit
root

function_definition
translation_unit

primitive_type
function_definition

function_declarator
function_definition

identifier
function_declarator

parameter_list
function_declarator

(
parameter_list

parameter_declaration
parameter_list

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

,
sized_type_specifier

parameter_declaration
sized_type_specifier

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

)
sized_type_specifier

compound_statement
sized_type_specifier

{
compound_statement

declaration
compound_statement

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

expression_statement
sized_type_specifier

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

binary_expression
ERROR

identifier
binary_expression

+
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

-
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

binary_expression
ERROR

identifier
binary_expression

*
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

binary_expression
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

binary_expression
ERROR

binary_expression
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

|
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

)
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

&
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

-
binary_expression

identifier
binary_expression

)
binary_expression

&
binary_expression

identifier
binary_expression

)
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

|
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

binary_expression
ERROR

identifier
binary_expression

-
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

binary_expression
ERROR

identifier
binary_expression

*
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

return_statement
binary_expression

return
return_statement

;
return_statement

}
return_statement

func5
int func5() { unsigned int v0; unsigned int v1; unsigned int v2; unsigned int v3; unsigned int v4; unsigned int v5; unsigned int v6; unsigned int v7; unsigned int v8; unsigned int v9; unsigned int v10; unsigned int v11; unsigned int v12; unsigned int v13; unsigned int v14; v14 = f_scanf_nop(); v13 = f_rand(); v12 = f_scanf_nop(); v11 = f_rand(); v10 = f_rand(); v9 = f_scanf_nop(); v8 = f_rand(); v7 = f_rand(); v6 = f_rand(); v5 = f_scanf_nop(); v4 = 1; v3 = -3; v2 = 7; v1 = 8; v0 = 1; v7 = v3 - v13; v4 = (v7 >> 31 CONCAT v7) % v11; v3 = (v2 >> 31 CONCAT v2) % v12; v4 = (v1 & v11 ^ v7) - v0; v0 = v4 + v7 - v1; v10 &= v7; f_printf(v10); v6 = v3 & v2 ^ v3; f_printf(v6); v2 = v3 - v13; f_printf(v2); v0 = v1 ^ v12; v11 = v12 + v13; v11 = v5 + v8; f_printf(v11); v11 = v9 * v1 * v4 & v6 ^ v5; v2 = (v0 >> 31 CONCAT v0) % v3; f_printf(v2); v14 = v12 * (v11 >> 31 CONCAT v11) % v13; v0 = v2 - v1 - v9 + v6; v14 = (v4 + v5 | v0) ^ v14; f_printf(v14); v11 = v7 - v5; f_printf(v11); v6 = ((v14 ^ v12) >> 31 CONCAT v14 ^ v12) % v5; v8 = v10 - v3; v13 = (v1 | v5) & v8; f_printf(v13); v4 = ((v11 | v1) >> 31 CONCAT v11 | v1) % v7 - v11; v6 = v2 + v11; f_printf(v6); v6 = v3 * v11 | v13; f_printf(v6); v9 = (v11 + v12 >> 31 CONCAT v11 + v12) % v11; f_printf(v9); v0 = v7 * (v8 ^ v10); v13 = v5 | v2; f_printf(v13); v10 = (v9 | v2) ^ v14; f_printf(v10); v11 *= v0 - v8; v6 = v6 + v13 + v12 - v0 & v5; v8 = v3 ^ v11; v4 = v5 | v13; return; }
translation_unit
root

function_definition
translation_unit

primitive_type
function_definition

function_declarator
function_definition

identifier
function_declarator

parameter_list
function_declarator

(
parameter_list

)
parameter_list

compound_statement
parameter_list

{
compound_statement

declaration
compound_statement

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

expression_statement
sized_type_specifier

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

&=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

^
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

|
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

-
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

binary_expression
ERROR

identifier
binary_expression

+
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

*=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

binary_expression
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

return_statement
binary_expression

return
return_statement

;
return_statement

}
return_statement

func6
int func6(unsigned long a0, unsigned long a1) { unsigned int v0; unsigned int v1; unsigned int v2; unsigned int v3; unsigned int v4; unsigned int v5; unsigned int v6; unsigned int v7; unsigned int v8; unsigned int v9; unsigned int v10; unsigned int v11; unsigned int v12; unsigned int v13; unsigned int v14; unsigned int v15; unsigned int v16; unsigned int v17; unsigned int v19; v17 = a0; v16 = a1; v15 = v19; v14 = f_rand(); v13 = f_scanf_nop(); v12 = f_scanf_nop(); v11 = f_scanf_nop(); v10 = f_scanf_nop(); v9 = f_rand(); v8 = f_scanf_nop(); v7 = f_scanf_nop(); v6 = f_rand(); v5 = f_rand(); v4 = -10; v3 = 9; v2 = 1; v1 = 9; v0 = -9; v10 = v11 + v15; f_printf(v10); v10 = v17 & v13 | v11 | v8; v10 = v10 - v3 - v14; v17 = v15 + v7 + v13; v5 = ((v10 >> 31 CONCAT v10) % v13 >> 31 CONCAT (v10 >> 31 CONCAT v10) % v13) % v14; f_printf(v5); v17 = ((v8 ^ v13) >> 31 CONCAT v8 ^ v13) % v4; f_printf(v17); v3 = v6 ^ v4 | v13; f_printf(v3); v0 = v5 ^ v1; v6 = (v3 + v7 >> 31 CONCAT v3 + v7) % v3; f_printf(v6); v1 = (v0 * v14 >> 31 CONCAT v0 * v14) % v16; v6 = v2 - v10; v9 = v11 ^ v17; f_printf(v9); v11 = v7 * v17; v1 = ((((v7 | v4) ^ v13) >> 31 CONCAT (v7 | v4) ^ v13) % v7 - v15 + v12 + v8 | v3) ^ v10; f_printf(v1); v6 = (v3 * v8 >> 31 CONCAT v3 * v8) % v8; f_printf(v6); v9 = v14 | v0; f_printf(v9); v2 *= v14; v1 = v11 * v3; v4 = v11 + v17; v14 = v17 + v5 + v16 & v17; f_printf(v14); v13 = v11 ^ v7; v6 = (v11 * (v9 & v7) >> 31 CONCAT v11 * (v9 & v7)) % v14; v5 = (v0 >> 31 CONCAT v0) % v2 + v10 - v8 - v13 & v9; v2 = v13 * (v4 >> 31 CONCAT v4) % v11; v15 = v4 & v3; f_printf(v15); v12 = (v15 * (v6 - v5 + v1) >> 31 CONCAT v15 * (v6 - v5 + v1)) % v1; f_printf(v12); v8 = v2 - v8 - v10; v7 = (v10 >> 31 CONCAT v10) % v4 ^ v17; v13 = v13 * v0 + v9 ^ v14; v11 = v3 | v13; f_printf(v11); v16 = v14 * (v15 - v6 >> 31 CONCAT v15 - v6) % v7 & v8; return; }
translation_unit
root

function_definition
translation_unit

primitive_type
function_definition

function_declarator
function_definition

identifier
function_declarator

parameter_list
function_declarator

(
parameter_list

parameter_declaration
parameter_list

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

,
sized_type_specifier

parameter_declaration
sized_type_specifier

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

)
sized_type_specifier

compound_statement
sized_type_specifier

{
compound_statement

declaration
compound_statement

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

expression_statement
sized_type_specifier

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

>>
ERROR

ERROR
ERROR

number_literal
ERROR

binary_expression
ERROR

call_expression
binary_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

binary_expression
argument_list

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

^
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

binary_expression
ERROR

identifier
binary_expression

+
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

binary_expression
ERROR

identifier
binary_expression

*
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

binary_expression
binary_expression

binary_expression
binary_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

call_expression
ERROR

identifier
call_expression

argument_list
call_expression

(
argument_list

binary_expression
argument_list

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

binary_expression
ERROR

identifier
binary_expression

*
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

*=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

)
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

binary_expression
ERROR

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

)
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

binary_expression
binary_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

+
ERROR

identifier
ERROR

-
ERROR

identifier
ERROR

-
ERROR

identifier
ERROR

&
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

)
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

binary_expression
ERROR

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

)
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

^
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

binary_expression
ERROR

identifier
binary_expression

-
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

return_statement
binary_expression

return
return_statement

;
return_statement

}
return_statement

func7
int func7(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4) { unsigned int v0; unsigned int v1; unsigned int v2; unsigned int v3; unsigned int v4; unsigned int v5; unsigned int v6; unsigned int v7; unsigned int v8; unsigned int v9; unsigned int v10; unsigned int v11; unsigned int v12; unsigned int v13; unsigned int v14; unsigned int v15; unsigned int v16; unsigned int v17; unsigned int v18; v18 = a0; v17 = a1; v16 = a2; v15 = a3; v14 = f_rand(); v13 = f_scanf_nop(); v12 = f_rand(); v11 = f_rand(); v10 = f_rand(); v9 = f_rand(); v8 = f_scanf_nop(); v7 = f_rand(); v6 = f_rand(); v5 = f_scanf_nop(); v4 = 1; v3 = -10; v2 = 7; v1 = 6; v0 = 8; v8 = (v16 >> 31 CONCAT v16) % v10; v14 = a4 * v1 - v12; f_printf(v14); v14 = v9 - v5; v9 = ((v7 - a4 >> 31 CONCAT v7 - a4) % v8 >> 31 CONCAT (v7 - a4 >> 31 CONCAT v7 - a4) % v8) % v5; v16 = v4 * (v1 * v0 + v0) + v7 - v8; f_printf(v16); v4 = ((v3 * v10 ^ v5) >> 31 CONCAT v3 * v10 ^ v5) % v11 | v8; f_printf(v4); v15 = v16 + v14; f_printf(v15); v4 = v0 + a4; v8 = v3 * v6; f_printf(v8); v5 = v6 * ((v14 ^ v15) + v9 & v14); f_printf(v5); v11 = v8 & v15; f_printf(v11); v4 = ((v8 & v5) >> 31 CONCAT v8 & v5) % v16; f_printf(v4); v3 = (v18 * (v8 & v9) >> 31 CONCAT v18 * (v8 & v9)) % a4; f_printf(v3); v0 = (v6 * v10 >> 31 CONCAT v6 * v10) % v8; f_printf(v0); v16 = v6 * v8; f_printf(v16); v5 = v6 & v14; v8 = v11 - v13 + v15 & v9; f_printf(v8); v10 = v18 | v5; f_printf(v10); v12 = (v1 >> 31 CONCAT v1) % v14; f_printf(v12); v14 = (v16 >> 31 CONCAT v16) % v14; v6 = (a4 + v8 & v14) + v0 | v11; v7 = v2 | v1; f_printf(v7); v12 = v6 & v3 | v0; f_printf(v12); v18 = v3 * v7; f_printf(v18); v16 = v7 * (v4 & v0); v15 = v9 ^ v18; f_printf(v15); v6 = v7 * v10 ^ v14; f_printf(v6); v13 = v4 ^ v6; v4 = (v6 | v13 | v2) & v5; f_printf(v4); v4 = (v4 >> 31 CONCAT v4) % v3 | v1; v12 = v5 * (v6 * v4 ^ a4) & v13; return; }
translation_unit
root

function_definition
translation_unit

primitive_type
function_definition

function_declarator
function_definition

identifier
function_declarator

parameter_list
function_declarator

(
parameter_list

parameter_declaration
parameter_list

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

,
sized_type_specifier

parameter_declaration
sized_type_specifier

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

,
sized_type_specifier

parameter_declaration
sized_type_specifier

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

,
sized_type_specifier

parameter_declaration
sized_type_specifier

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

,
sized_type_specifier

parameter_declaration
sized_type_specifier

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

)
sized_type_specifier

compound_statement
sized_type_specifier

{
compound_statement

declaration
compound_statement

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

expression_statement
sized_type_specifier

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

binary_expression
ERROR

identifier
binary_expression

-
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

binary_expression
ERROR

call_expression
binary_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

binary_expression
argument_list

binary_expression
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

binary_expression
ERROR

identifier
binary_expression

-
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

)
binary_expression

+
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

binary_expression
ERROR

identifier
binary_expression

*
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

+
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

)
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

)
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

&
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

)
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

binary_expression
ERROR

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

)
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

binary_expression
ERROR

identifier
binary_expression

*
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

)
binary_expression

+
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

)
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

|
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

return_statement
binary_expression

return
return_statement

;
return_statement

}
return_statement

func8
int func8(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3) { unsigned int v0; unsigned int v1; unsigned int v2; unsigned int v3; unsigned int v4; unsigned int v5; unsigned int v6; unsigned int v7; unsigned int v8; unsigned int v9; unsigned int v10; unsigned int v11; unsigned int v12; unsigned int v13; unsigned int v14; unsigned int v15; unsigned int v16; v16 = a0; v15 = a1; v14 = f_rand(); v13 = f_rand(); v12 = f_rand(); v11 = f_scanf_nop(); v10 = f_rand(); v9 = f_rand(); v8 = f_scanf_nop(); v7 = f_scanf_nop(); v6 = f_rand(); v5 = f_scanf_nop(); v4 = 8; v3 = -0x4; v2 = 4; v1 = 5; v0 = 9; v15 = v6 ^ v0; f_printf(v15); v8 = v6 + v16; v6 = (v13 | v14) + v0; f_printf(v6); v2 = v5 ^ a3; v2 = v12 - v14 + v7; v13 = (v14 >> 31 CONCAT v14) % v8 - v7 - v13; f_printf(v13); v15 = (v1 * v13 | v12) - v8; f_printf(v15); v4 = v11 - v15 | v0; v16 = (v10 - v15 >> 31 CONCAT v10 - v15) % v9; f_printf(v16); v9 = v11 | v8; f_printf(v9); v16 = (((v16 + a2 ^ v1 ^ v15) >> 31 CONCAT v16 + a2 ^ v1 ^ v15) % v9 - v10 | v9 | v5) & v7; f_printf(v16); v2 = v0 & a3; v10 = v4 ^ v3; v11 = v8 ^ v2; v2 = ((v10 & v0) >> 31 CONCAT v10 & v0) % v14 + v8 & v1; f_printf(v2); v11 += v6; f_printf(v11); v11 = (v2 ^ v14 ^ v11 | v7) - v6; v1 *= a2; v13 = v12 | v7; f_printf(v13); v8 = v7 * v16; f_printf(v8); v9 = (v13 >> 31 CONCAT v13) % v6; v9 = v0 + v13 & v1; v12 = v12 + v2 & v3; f_printf(v12); v0 = (v6 >> 31 CONCAT v6) % v14; v5 = (v1 >> 31 CONCAT v1) % v11 & v5; f_printf(v5); v7 = v12 * (((v3 >> 31 CONCAT v3) % v9 & v2) + v7 | v15); v13 = v8 + v2; v5 = v2 - v11; v16 = ((v3 >> 31 CONCAT v3) % v5 & v3 & v15) - v10 - a2; v13 = v12 | v14 | v13 | a3; f_printf(v13); v8 = (v7 >> 31 CONCAT v7) % v14 - v1; return; }
translation_unit
root

function_definition
translation_unit

primitive_type
function_definition

function_declarator
function_definition

identifier
function_declarator

parameter_list
function_declarator

(
parameter_list

parameter_declaration
parameter_list

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

,
sized_type_specifier

parameter_declaration
sized_type_specifier

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

,
sized_type_specifier

parameter_declaration
sized_type_specifier

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

,
sized_type_specifier

parameter_declaration
sized_type_specifier

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

)
sized_type_specifier

compound_statement
sized_type_specifier

{
compound_statement

declaration
compound_statement

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

expression_statement
sized_type_specifier

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

-
ERROR

identifier
ERROR

-
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

binary_expression
ERROR

identifier
binary_expression

-
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

binary_expression
binary_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

binary_expression
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

binary_expression
ERROR

identifier
binary_expression

+
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

)
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

&
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

+
ERROR

identifier
ERROR

&
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

+=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

binary_expression
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

*=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

&
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

&
ERROR

identifier
ERROR

)
ERROR

+
ERROR

identifier
ERROR

|
ERROR

identifier
ERROR

)
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

&
ERROR

identifier
ERROR

&
ERROR

identifier
ERROR

)
ERROR

-
ERROR

identifier
ERROR

-
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

-
ERROR

identifier
ERROR

;
ERROR

return_statement
ERROR

return
return_statement

;
return_statement

}
return_statement

func9
int func9(unsigned long a0, unsigned long a1, unsigned long a2) { unsigned int v0; unsigned int v1; unsigned int v2; unsigned int v3; unsigned int v4; unsigned int v5; unsigned int v6; unsigned int v7; unsigned int v8; unsigned int v9; unsigned int v10; unsigned int v11; unsigned int v12; unsigned int v13; unsigned int v14; unsigned int v15; unsigned int v16; unsigned int v17; v17 = a0; v16 = a1; v15 = a2; v14 = f_scanf_nop(); v13 = f_scanf_nop(); v12 = f_scanf_nop(); v11 = f_rand(); v10 = f_scanf_nop(); v9 = f_rand(); v8 = f_rand(); v7 = f_scanf_nop(); v6 = f_scanf_nop(); v5 = f_rand(); v4 = -9; v3 = -1; v2 = 8; v1 = -0x4; v0 = -5; v6 = (v8 | v12) + v3; f_printf(v6); v6 = v15 - v5 - v1; f_printf(v6); v0 = v9 * (v3 >> 31 CONCAT v3) % v12 & v13; f_printf(v0); v2 = (v14 >> 31 CONCAT v14) % v10; f_printf(v2); v12 = v14 * v12 | v10; v1 = v10 * v17; f_printf(v1); v7 = ((v1 * ((v14 >> 31 CONCAT v14) % v6 & v17) ^ v7) >> 31 CONCAT v1 * ((v14 >> 31 CONCAT v14) % v6 & v17) ^ v7) % v10; v10 = v11 * ((v0 >> 31 CONCAT v0) % v8 ^ v11 | v16) ^ v9; f_printf(v10); v14 = v12 ^ v4; f_printf(v14); v17 = v11 - v6; f_printf(v17); v11 = (v13 >> 31 CONCAT v13) % v1; f_printf(v11); v2 = (v15 >> 31 CONCAT v15) % v1 - v2; f_printf(v2); v12 = v9 + v11 + v7; f_printf(v12); v10 = v7 & v4; f_printf(v10); v7 = (v15 >> 31 CONCAT v15) % v7; v14 = v4 * ((v13 >> 31 CONCAT v13) % v10 + v14) ^ v15; f_printf(v14); v14 = (v17 + v9 >> 31 CONCAT v17 + v9) % v6 + v14; v13 = (v1 >> 31 CONCAT v1) % v9; f_printf(v13); v16 = v10 & v2; v1 = v10 & v16; f_printf(v1); v1 = ((v12 >> 31 CONCAT v12) % v0 >> 31 CONCAT (v12 >> 31 CONCAT v12) % v0) % v15; f_printf(v1); v13 = v1 - v13 & v15 & v8 & v4; f_printf(v13); v17 = v16 & v1; f_printf(v17); v2 = v16 + v11; f_printf(v2); v15 = ((v1 >> 31 CONCAT v1) % v14 >> 31 CONCAT (v1 >> 31 CONCAT v1) % v14) % v7; v7 = v10 * ((v2 * (v14 + v3) | v14) >> 31 CONCAT v2 * (v14 + v3) | v14) % v6; f_printf(v7); v9 = (((v17 ^ v13) & v15) >> 31 CONCAT (v17 ^ v13) & v15) % v9; v2 = v3 & v4 & v13; v7 = ((v0 & v6) >> 31 CONCAT v0 & v6) % v13; f_printf(v7); v4 = v1 + v0; f_printf(v4); v17 = v9 & v10; return; }
translation_unit
root

function_definition
translation_unit

primitive_type
function_definition

function_declarator
function_definition

identifier
function_declarator

parameter_list
function_declarator

(
parameter_list

parameter_declaration
parameter_list

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

,
sized_type_specifier

parameter_declaration
sized_type_specifier

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

,
sized_type_specifier

parameter_declaration
sized_type_specifier

sized_type_specifier
parameter_declaration

unsigned
sized_type_specifier

long
sized_type_specifier

identifier
sized_type_specifier

)
sized_type_specifier

compound_statement
sized_type_specifier

{
compound_statement

declaration
compound_statement

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

expression_statement
sized_type_specifier

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

identifier
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

&
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

|
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

*
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

&
ERROR

identifier
ERROR

)
ERROR

^
ERROR

identifier
ERROR

)
ERROR

>>
ERROR

ERROR
ERROR

number_literal
ERROR

identifier
ERROR

binary_expression
ERROR

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

&
ERROR

identifier
ERROR

)
ERROR

^
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

^
ERROR

identifier
ERROR

|
ERROR

identifier
ERROR

)
ERROR

^
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

-
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

+
ERROR

identifier
ERROR

)
ERROR

^
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

binary_expression
ERROR

identifier
binary_expression

+
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

>>
ERROR

ERROR
ERROR

number_literal
ERROR

binary_expression
ERROR

call_expression
binary_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

binary_expression
argument_list

identifier
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

binary_expression
binary_expression

binary_expression
binary_expression

identifier
binary_expression

-
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

>>
ERROR

ERROR
ERROR

number_literal
ERROR

binary_expression
ERROR

call_expression
binary_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

binary_expression
argument_list

identifier
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

)
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

identifier
ERROR

binary_expression
ERROR

identifier
binary_expression

*
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

)
binary_expression

|
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

&
binary_expression

identifier
binary_expression

)
binary_expression

>>
binary_expression

ERROR
binary_expression

number_literal
ERROR

call_expression
ERROR

identifier
call_expression

argument_list
call_expression

(
argument_list

binary_expression
argument_list

identifier
binary_expression

^
binary_expression

identifier
binary_expression

)
binary_expression

&
binary_expression

identifier
binary_expression

)
binary_expression

%
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

binary_expression
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

binary_expression
binary_expression

parenthesized_expression
binary_expression

(
parenthesized_expression

binary_expression
parenthesized_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

)
binary_expression

>>
binary_expression

number_literal
binary_expression

ERROR
binary_expression

identifier
ERROR

identifier
ERROR

&
ERROR

identifier
ERROR

)
ERROR

%
ERROR

identifier
ERROR

;
ERROR

expression_statement
ERROR

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

+
binary_expression

identifier
binary_expression

;
binary_expression

expression_statement
binary_expression

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

binary_expression
assignment_expression

identifier
binary_expression

&
binary_expression

identifier
binary_expression

;
binary_expression

return_statement
binary_expression

return
return_statement

;
return_statement

}
return_statement

main
int main() { unsigned int v0; unsigned int v1; unsigned int v2; unsigned int v3; unsigned int v4; unsigned int v5; v5 = 0; v4 = f_scanf_nop(); v3 = f_rand(); v2 = f_rand(); v1 = f_scanf_nop(); v0 = f_rand(); func0(v4); func1(v4, v3, v2, v1, v0); func2(v4); func3(v4, v3, v2, v1, v0); func4(v4, v3); func5(); func6(v4, v3); func7(v4, v3, v2, v1, v0); func8(v4, v3, v2, v1); func9(v4, v3, v2); return 0; }
translation_unit
root

function_definition
translation_unit

primitive_type
function_definition

function_declarator
function_definition

identifier
function_declarator

parameter_list
function_declarator

(
parameter_list

)
parameter_list

compound_statement
parameter_list

{
compound_statement

declaration
compound_statement

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

declaration
sized_type_specifier

sized_type_specifier
declaration

unsigned
sized_type_specifier

primitive_type
sized_type_specifier

identifier
sized_type_specifier

;
sized_type_specifier

expression_statement
sized_type_specifier

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

number_literal
assignment_expression

;
assignment_expression

expression_statement
assignment_expression

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

assignment_expression
expression_statement

identifier
assignment_expression

=
assignment_expression

call_expression
assignment_expression

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

,
argument_list

identifier
argument_list

,
argument_list

identifier
argument_list

,
argument_list

identifier
argument_list

,
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

,
argument_list

identifier
argument_list

,
argument_list

identifier
argument_list

,
argument_list

identifier
argument_list

,
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

,
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

,
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

,
argument_list

identifier
argument_list

,
argument_list

identifier
argument_list

,
argument_list

identifier
argument_list

,
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

,
argument_list

identifier
argument_list

,
argument_list

identifier
argument_list

,
argument_list

identifier
argument_list

)
argument_list

;
argument_list

expression_statement
argument_list

call_expression
expression_statement

identifier
call_expression

argument_list
call_expression

(
argument_list

identifier
argument_list

,
argument_list

identifier
argument_list

,
argument_list

identifier
argument_list

)
argument_list

;
argument_list

return_statement
argument_list

return
return_statement

number_literal
return_statement

;
return_statement

}
return_statement

